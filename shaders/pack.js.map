{
  "version": 3,
  "sources": ["pack.ts"],
  "sourcesContent": ["import type {} from './iris'\r\n\r\nfunction setLightColors(){\r\n    // colours stolen from null\r\n\r\n    setLightColor(\"campfire\", 243, 152, 73, 255);\r\n    setLightColor(\"candle\", 245, 127, 68, 255);\r\n    setLightColor(\"cave_vines\", 243, 133, 59, 255);\r\n    setLightColor(\"cave_vines_plant\", 243, 133, 59, 255);\r\n    setLightColor(\"glow_lichen\", 107, 238, 172, 255);\r\n    setLightColor(\"lantern\", 243, 158, 73, 255);\r\n    setLightColor(\"lava\", 193, 100, 38, 255);\r\n    setLightColor(\"ochre_froglight\", 223, 172, 71, 255);\r\n    setLightColor(\"pearlescent_froglight\", 224, 117, 232, 255);\r\n    setLightColor(\"redstone_torch\", 249, 50, 28, 255);\r\n    setLightColor(\"soul_campfire\", 40, 170, 235, 255);\r\n    setLightColor(\"soul_torch\", 40, 170, 235, 255);\r\n    setLightColor(\"torch\", 243, 181, 73, 255);\r\n    setLightColor(\"verdant_froglight\", 99, 229, 60, 255);\r\n    setLightColor(\"wall_torch\", 243, 158, 73, 255);\r\n    setLightColor(\"nether_portal\", 100, 0, 255, 255);\r\n\r\n    const glassOpacity = 255;\r\n\r\n    setLightColor(\"tinted_glass\", 50, 38, 56, glassOpacity);\r\n    setLightColor(\"white_stained_glass\",      255, 255, 255, glassOpacity);\r\n    setLightColor(\"white_stained_glass_pane\", 255, 255, 255, glassOpacity);\r\n    setLightColor(\"light_gray_stained_glass\",      153, 153, 153, glassOpacity);\r\n    setLightColor(\"light_gray_stained_glass_pane\", 153, 153, 153, glassOpacity);\r\n    setLightColor(\"gray_stained_glass\",      76, 76, 76, glassOpacity);\r\n    setLightColor(\"gray_stained_glass_pane\", 76, 76, 76, glassOpacity);\r\n    setLightColor(\"black_stained_glass\",      25, 25, 25, glassOpacity);\r\n    setLightColor(\"black_stained_glass_pane\", 25, 25, 25, glassOpacity);\r\n    setLightColor(\"brown_stained_glass\",      102, 76, 51, glassOpacity);\r\n    setLightColor(\"brown_stained_glass_pane\", 102, 76, 51, glassOpacity);\r\n\r\n    setLightColor(\"red_stained_glass\",      153, 51, 51, glassOpacity);\r\n    setLightColor(\"red_stained_glass_pane\", 153, 51, 51, glassOpacity);\r\n    setLightColor(\"orange_stained_glass\",      216, 127, 51, glassOpacity);\r\n    setLightColor(\"orange_stained_glass_pane\", 216, 127, 51, glassOpacity);\r\n    setLightColor(\"yellow_stained_glass\",      229, 229, 51, glassOpacity);\r\n    setLightColor(\"yellow_stained_glass_pane\", 229, 229, 51, glassOpacity);\r\n    setLightColor(\"lime_stained_glass\",      127, 204, 25, glassOpacity);\r\n    setLightColor(\"lime_stained_glass_pane\", 127, 204, 25, glassOpacity);\r\n    setLightColor(\"green_stained_glass\",      102, 127, 51, glassOpacity);\r\n    setLightColor(\"green_stained_glass_pane\", 102, 127, 51, glassOpacity);\r\n    setLightColor(\"cyan_stained_glass\",      76, 127, 153, glassOpacity);\r\n    setLightColor(\"cyan_stained_glass_pane\", 76, 127, 153, glassOpacity);\r\n    setLightColor(\"light_blue_stained_glass\",      102, 153, 216, glassOpacity);\r\n    setLightColor(\"light_blue_stained_glass_pane\", 102, 153, 216, glassOpacity);\r\n    setLightColor(\"blue_stained_glass\",      51, 76, 178, glassOpacity);\r\n    setLightColor(\"blue_stained_glass_pane\", 51, 76, 178, glassOpacity);\r\n    setLightColor(\"purple_stained_glass\",      127, 63, 178, glassOpacity);\r\n    setLightColor(\"purple_stained_glass_pane\", 127, 63, 178, glassOpacity);\r\n    setLightColor(\"magenta_stained_glass\",      178, 76, 216, glassOpacity);\r\n    setLightColor(\"magenta_stained_glass_pane\", 178, 76, 216, glassOpacity);\r\n    setLightColor(\"pink_stained_glass\",      242, 127, 165, glassOpacity);\r\n    setLightColor(\"pink_stained_glass_pane\", 242, 127, 165, glassOpacity);\r\n}\r\n\r\nfunction defineBoolGlobally(define){\r\n    if(getBoolSetting(define)){\r\n        defineGlobally(define, 1);\r\n    }\r\n}\r\n\r\n\r\nexport function setupShader() {    \r\n    defineBoolGlobally(\"BLOOM_ENABLE\");\r\n    defineGlobally(\"SHADOW_SAMPLES\", getIntSetting(\"SHADOW_SAMPLES\"));\r\n    defineBoolGlobally(\"DEBUG_ENABLE\");\r\n\r\n    setLightColors();\r\n\r\n    const maxMip = Math.floor(Math.log2(Math.max(screenWidth, screenHeight)));\r\n\r\n    worldSettings.ambientOcclusionLevel = 1.0;\r\n    worldSettings.disableShade = true;\r\n    worldSettings.renderEntityShadow = false;\r\n    worldSettings.shadowMapResolution = 1024;\r\n    worldSettings.sunPathRotation = -40.0;\r\n    worldSettings.renderSun = false;\r\n\r\n    const sceneData = new Buffer(32)\r\n        .clear(true)\r\n        .build();\r\n\r\n    const blueNoiseTex = new PNGTexture(\"blueNoiseTex\", \"textures/blueNoise.png\", false, true);\r\n\r\n    const debugTex = new Texture(\"debugTex\")\r\n        .format(Format.RGBA8)\r\n        .imageName(\"debugImg\")\r\n        .width(screenWidth).height(screenHeight)\r\n        .clear(true)\r\n        .clearColor(0, 0, 0, 0)\r\n        .build()\r\n\r\n    const previousSceneTex = new Texture(\"previousSceneTex\")\r\n        .format(Format.RGB16F)\r\n        .clear(false)\r\n        .mipmap(true)\r\n        .build();\r\n\r\n    const previousDepthTex = new Texture(\"previousDepthTex\")\r\n        .format(Format.RG16)\r\n        .clear(false)\r\n        .mipmap(true)\r\n        .build();;\r\n\r\n    // ======================= SETUP =======================\r\n\r\n    const sunTransmittanceLUT = new Texture(\"sunTransmittanceLUTTex\")\r\n        .format(Format.RGBA16F)\r\n        .imageName(\"sunTransmittanceLUT\")\r\n        .width(256).height(64)\r\n        .clear(false)\r\n        .build();\r\n\r\n    registerShader(\r\n        Stage.SCREEN_SETUP,\r\n        new Compute(\"generateSunTransmittanceLUT\")\r\n        .location(\"program/sky/generateSunTransmittanceLUT.csh\")\r\n        .workGroups(32, 8, 1)\r\n        .build()\r\n    )\r\n\r\n    const multipleScatteringLUT = new Texture(\"multipleScatteringLUTTex\")\r\n        .format(Format.RGBA16F)\r\n        .imageName(\"multipleScatteringLUT\")\r\n        .width(32).height(32)\r\n        .clear(false)\r\n        .build();\r\n\r\n    registerShader(\r\n        Stage.SCREEN_SETUP,\r\n        new Compute(\"generateMultipleScatteringLUT\")\r\n        .location(\"program/sky/generateMultipleScatteringLUT.csh\")\r\n        .workGroups(4, 4, 1)\r\n        .build()\r\n    )\r\n\r\n    const skyViewLUT = new Texture(\"skyViewLUTTex\")\r\n        .format(Format.RGBA16F)\r\n        .imageName(\"skyViewLUT\")\r\n        .width(200).height(200)\r\n        .clear(true)\r\n        .mipmap(true)\r\n        .build()\r\n\r\n    // ======================= PREPARE =======================\r\n\r\n    registerShader(\r\n        Stage.PRE_RENDER,\r\n        new Compute(\"generateSkyViewLUT\")\r\n        .location(\"program/sky/generateSkyViewLUT.csh\")\r\n        .workGroups(25, 25, 1)\r\n        .ssbo(0, sceneData)\r\n        .build()\r\n    )\r\n\r\n    registerShader(\r\n        Stage.PRE_RENDER,\r\n        new GenerateMips(skyViewLUT)\r\n    );\r\n\r\n    registerShader(\r\n        Stage.PRE_RENDER,\r\n        new Compute(\"getSkylightColor\")\r\n        .location(\"program/sky/getSkylightColor.csh\")\r\n        .workGroups(1, 1, 1)\r\n        .ssbo(0, sceneData)\r\n        .build()\r\n    )\r\n\r\n    registerShader(Stage.PRE_RENDER, new MemoryBarrier(SSBO_BIT));\r\n\r\n    registerShader(\r\n        Stage.PRE_RENDER,\r\n        new GenerateMips(previousSceneTex)\r\n    );\r\n\r\n    // ======================= SHADOW =======================\r\n\r\n    const shadowColorTex = new ArrayTexture(\"shadowColorTex\")\r\n    .format(Format.RGBA8)\r\n    .clear(true)\r\n    .build();\r\n\r\n    const shadowNormalTex = new ArrayTexture(\"shadowNormalTex\")\r\n        .format(Format.RGBA8)\r\n        .clear(true)\r\n        .clearColor(0.0, 0.0, 0.0, 0.0)\r\n        .build();\r\n\r\n    const shadowPositionTex = new ArrayTexture(\"shadowPositionTex\")\r\n        .format(Format.RGB16F)\r\n        .clear(true)\r\n        .build()\r\n\r\n\r\n    registerShader(\r\n        new ObjectShader(\"shadow\", Usage.SHADOW)\r\n        .vertex(\"program/gbuffer/shadow.vsh\")\r\n        .fragment(\"program/gbuffer/shadow.fsh\")\r\n        .target(0, shadowColorTex)\r\n        .target(1, shadowNormalTex)\r\n        .target(2, shadowPositionTex)\r\n        .build()\r\n    );\r\n\r\n    // ======================= GBUFFERS =======================\r\n    const sceneTex = new Texture(\"sceneTex\")\r\n        .format(Format.RGB16F)\r\n        .clear(true)\r\n        .clearColor(0.0, 0.0, 0.0, 1.0)\r\n        .build();\r\n\r\n    const translucentsTex = new Texture(\"translucentsTex\")\r\n        .format(Format.RGBA16F)\r\n        .clear(true)\r\n        .clearColor(0, 0, 0, 0)\r\n        .build();\r\n\r\n    const gbufferDataTex1 = new Texture(\"gbufferDataTex1\")\r\n        .format(Format.RGBA16)\r\n        .clear(true)\r\n        .build()\r\n\r\n    const gbufferDataTex2 = new Texture(\"gbufferDataTex2\")\r\n        .format(Format.RGBA16)\r\n        .clear(true)\r\n        .build()\r\n\r\n    registerShader(\r\n        new ObjectShader(\"sky\", Usage.SKYBOX)\r\n        .vertex(\"program/gbuffer/sky.vsh\")\r\n        .fragment(\"program/gbuffer/sky.fsh\")\r\n        .define(\"SKY_BASIC\", \"1\")\r\n        .target(0, sceneTex)\r\n        .build()\r\n    );\r\n\r\n    registerShader(\r\n        new ObjectShader(\"sky\", Usage.SKY_TEXTURES)\r\n        .vertex(\"program/gbuffer/sky.vsh\")\r\n        .fragment(\"program/gbuffer/sky.fsh\")\r\n        .define(\"SKY_TEXTURED\", \"2\")\r\n        .target(0, sceneTex)\r\n        .build()\r\n    );\r\n\r\n    const deferredGbuffers = [\r\n        Usage.TERRAIN_SOLID,\r\n        Usage.TERRAIN_CUTOUT,\r\n        Usage.ENTITY_SOLID,\r\n        Usage.ENTITY_CUTOUT,\r\n        Usage.BLOCK_ENTITY,\r\n        Usage.PARTICLES\r\n    ];\r\n\r\n    const forwardGbuffers = [\r\n        Usage.TERRAIN_TRANSLUCENT,\r\n        Usage.ENTITY_TRANSLUCENT,\r\n        Usage.BLOCK_ENTITY_TRANSLUCENT,\r\n        Usage.PARTICLES_TRANSLUCENT,\r\n        Usage.HAND\r\n    ];\r\n\r\n    deferredGbuffers.forEach(program => {\r\n        registerShader(\r\n            new ObjectShader(\"terrain\", program)\r\n            .vertex(\"program/gbuffer/main.vsh\")\r\n            .fragment(\"program/gbuffer/main.fsh\")\r\n            .target(0, sceneTex)\r\n            .target(1, gbufferDataTex1)\r\n            .target(2, gbufferDataTex2)\r\n            .ssbo(0, sceneData)\r\n            .build()\r\n        );\r\n    })\r\n\r\n    forwardGbuffers.forEach(program => {\r\n        registerShader(\r\n            new ObjectShader(\"terrain\", program)\r\n            .vertex(\"program/gbuffer/main.vsh\")\r\n            .fragment(\"program/gbuffer/main.fsh\")\r\n            .target(0, translucentsTex)\r\n            .target(1, gbufferDataTex1)\r\n            .target(2, gbufferDataTex2)\r\n            .define(\"FORWARD_LIGHTING\", \"1\")\r\n            .ssbo(0, sceneData)\r\n            .build()\r\n        );\r\n    })\r\n\r\n\r\n    registerShader(\r\n        new ObjectShader(\"clouds\", Usage.CLOUDS)\r\n        .vertex(\"program/gbuffer/discard.vsh\")\r\n        .fragment(\"program/gbuffer/discard.fsh\")\r\n        .build()\r\n    );\r\n\r\n    // ======================= DEFERRED =======================\r\n\r\n    \r\n    registerShader(Stage.PRE_TRANSLUCENT, new MemoryBarrier(IMAGE_BIT));\r\n\r\n    // these must be multiples of 64\r\n    const voxelMapWidth = 256;\r\n    const voxelMapHeight = 128;\r\n\r\n    defineGlobally(\"VOXEL_MAP_SIZE\", `vec3(${voxelMapWidth}, ${voxelMapHeight}, ${voxelMapWidth})`);\r\n\r\n    const floodfillVoxelMap1 = new Texture(\"floodFillVoxelMapTex1\")\r\n        .format(Format.R11F_G11F_B10F)\r\n        .imageName(\"floodFillVoxelMap1\")\r\n        .clear(false)\r\n        .width(voxelMapWidth)\r\n        .height(voxelMapHeight)\r\n        .depth(voxelMapWidth)\r\n        .build();\r\n\r\n    const floodfillVoxelMap2 = new Texture(\"floodFillVoxelMapTex2\")\r\n        .format(Format.R11F_G11F_B10F)\r\n        .imageName(\"floodFillVoxelMap2\")\r\n        .clear(false)\r\n        .width(voxelMapWidth)\r\n        .height(voxelMapHeight)\r\n        .depth(voxelMapWidth)\r\n        .build()\r\n\r\n    const voxelMap = new Texture(\"voxelMapTex\")\r\n        .format(Format.R32UI)\r\n        .imageName(\"voxelMap\")\r\n        .clear(true)\r\n        .clearColor(0.0, 0.0, 0.0, 0.0)\r\n        .width(voxelMapWidth)\r\n        .height(voxelMapHeight)\r\n        .depth(voxelMapWidth)\r\n        .build()\r\n\r\n    registerShader(\r\n        Stage.PRE_TRANSLUCENT,\r\n        new Compute(\"floodfillPropagate\")\r\n        .location(\"program/composite/floodfillPropagate.csh\")\r\n        .workGroups(voxelMapWidth / 4, voxelMapHeight / 4, voxelMapWidth / 4)\r\n        .build()\r\n    );\r\n\r\n    registerShader(Stage.PRE_TRANSLUCENT, new MemoryBarrier(IMAGE_BIT));\r\n\r\n    const globalIlluminationTex = new Texture(\"globalIlluminationTex\")\r\n        .format(Format.R11F_G11F_B10F)\r\n        .clear(false)\r\n        .width(Math.floor(screenWidth / 4)).height(Math.floor(screenHeight / 4))\r\n        .build();\r\n\r\n    registerShader(\r\n        Stage.PRE_TRANSLUCENT,\r\n        new Composite(\"globalIllumination\")\r\n        .vertex(\"program/fullscreen.vsh\")\r\n        .fragment(\"program/composite/globalIllumination.fsh\")\r\n        .target(0, globalIlluminationTex)\r\n        .build()\r\n    )\r\n\r\n    registerShader(\r\n        Stage.PRE_TRANSLUCENT,\r\n        new Composite(\"compositeSky\")\r\n        .vertex(\"program/fullscreen.vsh\")\r\n        .fragment(\"program/composite/compositeSky.fsh\")\r\n        .target(0, sceneTex)\r\n        .build()\r\n    );\r\n\r\n    registerShader(\r\n        Stage.PRE_TRANSLUCENT,\r\n        new Composite(\"deferredShading\")\r\n        .vertex(\"program/fullscreen.vsh\")\r\n        .fragment(\"program/composite/deferredShading.fsh\")\r\n        .target(0, sceneTex)\r\n        .ssbo(0, sceneData)\r\n        .build()\r\n    );\r\n\r\n    // ======================= COMPOSITES =======================\r\n\r\n    registerShader(\r\n        Stage.POST_RENDER,\r\n        new Composite(\"compositeTranslucents\")\r\n        .vertex(\"program/fullscreen.vsh\")\r\n        .fragment(\"program/composite/compositeTranslucents.fsh\")\r\n        .target(0, sceneTex)\r\n        .ssbo(0, sceneData)\r\n        .build()\r\n    );\r\n\r\n    // ======================= POST =======================\r\n\r\n    registerShader(\r\n        Stage.POST_RENDER,\r\n        new Composite(\"temporalFilter\")\r\n            .vertex(\"program/fullscreen.vsh\")\r\n            .fragment(\"program/post/temporalFilter.fsh\")\r\n            .target(0, sceneTex)\r\n            .build()\r\n    );\r\n\r\n    registerShader(\r\n        Stage.POST_RENDER,\r\n        new Composite(\"copyHistory\")\r\n            .vertex(\"program/fullscreen.vsh\")\r\n            .fragment(\"program/post/copyHistory.fsh\")\r\n            .target(0, previousSceneTex)\r\n            .target(1, previousDepthTex)\r\n            .build()\r\n    );\r\n\r\n    // for(let i = 1; i <= maxMip; i++){\r\n    //     registerShader(\r\n    //         Stage.POST_RENDER,\r\n    //         new Composite(`generateDepthMip${i}`)\r\n    //             .vertex(\"program/fullscreen.vsh\")\r\n    //             .fragment(\"program/misc/buildHiZDepthMips.fsh\")\r\n    //             .target(0, previousDepthTex, i)\r\n    //             .define(\"DEPTH_SAMPLER\", \"previousDepthTex\")\r\n    //             .define(\"MIP_LEVEL\", i.toString())\r\n    //             .build()\r\n    //     );\r\n    // }\r\n\r\n\r\n    if(getBoolSetting(\"BLOOM_ENABLE\")){\r\n        const bloomTex = new Texture(\"bloomTex\")\r\n            .format(Format.RGB16F)\r\n            .clear(true)\r\n            .mipmap(true)\r\n            .build();\r\n\r\n        for(let i = 0; i < 8; i++){\r\n            registerShader(\r\n                Stage.POST_RENDER,\r\n                new Composite(`bloomDownsample${i}-${i+1}`)\r\n                .vertex(\"program/fullscreen.vsh\")\r\n                .fragment(\"program/post/bloomDownsample.fsh\")\r\n                .target(0, bloomTex, i + 1)\r\n                .define(\"BLOOM_INDEX\", i.toString())\r\n                .build()\r\n            )\r\n        }\r\n    \r\n        for(let i = 8; i > 0; i -= 1){\r\n            registerShader(\r\n                Stage.POST_RENDER,\r\n                new Composite(`bloomUpsample${i}-${i-1}`)\r\n                .vertex(\"program/fullscreen.vsh\")\r\n                .fragment(\"program/post/bloomUpsample.fsh\")\r\n                .target(0, bloomTex, i - 1)\r\n                .define(\"BLOOM_INDEX\", i.toString())\r\n                .build()\r\n            )\r\n        }\r\n    }\r\n\r\n    setCombinationPass(\r\n        new CombinationPass(\"program/final.fsh\")\r\n        .build()\r\n    );\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
